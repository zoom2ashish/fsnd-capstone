{"version":3,"sources":["components/Actor/Actor.tsx","containers/Actors/Actors.tsx","containers/Layout/Layout.tsx","components/Movie/Movie.tsx","utils/dateutils.ts","components/MovieForm/MovieForm.tsx","services/axios.ts","containers/Movies/Movies.tsx","services/axios-movies.ts","App.tsx","serviceWorker.ts","index.tsx","components/Actor/Actor.module.css","components/Movie/Movie.module.css"],"names":["Actor","props","cssClasses","classes","join","Card","className","Body","Row","Col","sm","data","name","age","ActionButtons","Button","variant","Actors","useState","actorItems","setActorItems","useEffect","fetch","then","response","json","results","actors","map","actorItem","key","id","Layout","Container","Navbar","bg","Brand","href","Toggle","aria-controls","Collapse","Nav","to","activeClassName","children","Movie","actor","Badge","releaseDate","Release_Date","timestampInSeconds","isNaN","date","Date","getFullYear","getMonth","getDate","release_date","Title","title","Subtitle","Text","Footer","Link","onClick","onEdit","onDelete","withRouter","movie","initialReleaseDate","initialSelectedActors","value","label","setError","setReleaseDate","setTitle","allActors","setAllActors","selectedActors","setSelectedActors","actorOptions","Modal","show","onHide","onClose","active","Header","closeButton","isEditing","Form","Group","controlId","Label","Control","type","placeholder","onChange","event","target","selected","selectedDate","isMulti","selectedOptions","console","log","options","as","rows","updatedMovie","Math","round","getTime","url","method","body","JSON","stringify","catch","e","message","instance","axios","create","headers","interceptors","use","error","status","movieItems","setMovieItems","visible","modalData","setModalData","get","cardDesks","forEach","movieItem","length","push","noMoviesPlaceHolder","modal","size","cards","index","CardDeck","App","routes","path","component","Movies","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","basename","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.ace8c421.chunk.js","sourcesContent":["import React from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport Badge from \"react-bootstrap/Badge\";\nimport classes from './Actor.module.css';\nimport { ActorDto } from '../../dto';\n\nexport interface ActorProps {\n  data: ActorDto;\n}\n\nconst Actor = (props: React.PropsWithChildren<ActorProps>) => {\n\n  const cssClasses = [ classes.Actor, 'mb-4' ].join(' ');\n  return (\n<Card className={cssClasses}>\n      <Card.Body>\n        <Row>\n          <Col sm={8}>\n            <h4>{props.data?.name}</h4>\n            <h6>Age: {props.data?.age} yrs</h6>\n          </Col>\n          <Col sm={4} className=\"justify-content-end\">\n            <div className={classes.ActionButtons}>\n              <Button variant=\"primary\" className=\"ml-1\">Edit</Button>\n              <Button variant=\"danger\" className=\"ml-1\">Delete</Button>\n            </div>\n          </Col>\n        </Row>\n      </Card.Body>\n    </Card>\n  );\n};\n\nexport default Actor;","import React, { useState, useEffect }  from 'react';\nimport Actor from '../../components/Actor/Actor';\nimport { ActorDto } from '../../dto';\n\nexport interface ActorsProps {\n}\n\nconst Actors = (props: React.PropsWithChildren<ActorsProps>) => {\n  const [actorItems, setActorItems] = useState([]);\n\n  useEffect(() => {\n      fetch('/api/actors').then(response => response.json()).then(data => {\n        setActorItems(data.results);\n      })\n  }, []);\n\n  const actors = actorItems.map((actorItem: ActorDto) => {\n    return (<Actor key={actorItem.id} data={actorItem}></Actor>);\n  });\n\n  return (\n    <>\n      {actors}\n    </>\n  );\n};\n\nexport default Actors;","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport NavDropdown from 'react-bootstrap/NavDropdown';\nimport Container from 'react-bootstrap/Container';\nimport classes from './Layout.module.css';\n\nconst Layout = (props: React.Props<any>) => {\n  return (\n    <Container>\n      <Navbar bg=\"dark\"  variant=\"dark\">\n        <Navbar.Brand href=\"#home\">Casting Agency</Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav className=\"mr-auto\">\n            <NavLink to=\"/movies\" className=\"nav-link\" activeClassName={'active'}>Movies</NavLink>\n            <NavLink to=\"/actors\" className=\"nav-link\" activeClassName={'active'}>Actors</NavLink>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n      <div className={'container-fluid pt-4'}>\n        {props.children}\n      </div>\n    </Container>\n  );\n};\n\nexport default Layout;","import React from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport Badge from \"react-bootstrap/Badge\";\nimport { MovieDto, ActorDto } from \"../../dto\";\nimport classes from \"./Movie.module.css\";\nimport { Link, NavLink } from 'react-router-dom';\nimport { getDate } from '../../utils/dateutils';\n\nexport interface MovieProps {\n  data: MovieDto;\n  onEdit: (id: number) => void;\n  onDelete: (id: number) => void;\n}\n\nconst Movie = (props: React.PropsWithChildren<MovieProps>) => {\n  const actors = (props.data.actors || []).map((actor: ActorDto) => (\n    <Badge key={actor.id} variant=\"info\" className=\"mr-2\">{actor.name}</Badge>\n  ));\n\n  const releaseDate = (\n    <span className={[classes.Release_Date, \"pt-1\"].join(\" \")}>\n      Release Date: {getDate(props.data.release_date)}\n    </span>\n  );\n\n  return (\n      <Card className={classes.Movie}>\n        <Card.Body>\n          <Card.Title>{props.data?.title}</Card.Title>\n          <Card.Subtitle className=\"mb-2 text-muted\">\n            {releaseDate}\n          </Card.Subtitle>\n          <Card.Text>\n            {actors}\n          </Card.Text>\n        </Card.Body>\n        <Card.Footer>\n          <Card.Link href=\"#\" onClick={() => props.onEdit(props.data.id)}>Edit</Card.Link>\n          <Card.Link href=\"#\" onClick={() => props.onDelete(props.data.id)}>Delete</Card.Link>\n        </Card.Footer>\n      </Card>\n  );\n};\n\nexport default Movie;\n","export const getDate = (timestampInSeconds: number = 0) => {\n  if (!isNaN(timestampInSeconds) && timestampInSeconds > 0) {\n    const date = new Date(timestampInSeconds * 1000); // convert in Milliseconds\n    return `${date.getFullYear()}/${date.getMonth() + 1}/${date.getDate()}`;\n  } else {\n    return \"N/A\";\n  }\n};","import React, { useEffect, useState } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Modal from 'react-bootstrap/Modal';\nimport FocusTrap from 'react-focus-trap';\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\nimport Select, { ValueType } from 'react-select';\nimport DatePicker from 'react-datepicker';\nimport { ActorListResultDto, MovieDto, MoviePostRequestDto } from '../../dto';\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nexport interface MovieFormProps {\n  show: boolean;\n  isEditing?: boolean;\n  data?: MovieDto;\n  onClose: () => void;\n}\n\ntype OptionType = {\n  value: number;\n  label: string;\n};\n\nconst MovieForm = (\n  props: React.PropsWithChildren<MovieFormProps> & RouteComponentProps\n) => {\n  const movie = props.data || null;\n  const initialReleaseDate = (movie && movie.release_date) ? new Date(movie.release_date * 1000) : new Date(); // \"release_date\" in seconds, whereas Date expects milliseconds\n  const initialSelectedActors = (\n    (movie && movie.actors) ||\n    []\n  ).map((actor) => ({ value: actor.id, label: actor.name }));\n\n  const [error, setError] = useState<string>('');\n  const [releaseDate, setReleaseDate] = useState<Date>(initialReleaseDate)\n  const [title, setTitle] = useState<string>((movie && movie.title) || \"\");\n  const [allActors, setAllActors] = useState<OptionType[]>(\n    initialSelectedActors\n  );\n  const [selectedActors, setSelectedActors] = useState<OptionType[]>(\n    initialSelectedActors\n  );\n\n  useEffect(() => {\n    fetch(\"/api/actors\")\n      .then((response) => response.json())\n      .then((response: ActorListResultDto) => {\n        const actorOptions: OptionType[] = response.results.map((actor) => ({\n          value: actor.id,\n          label: actor.name,\n        }));\n        setAllActors(actorOptions);\n      });\n  }, []);\n\n  const handleActorSelectionChange = (\n    selectedOptions: ValueType<OptionType>\n  ) => {\n    console.log(\"selectedOptions=\", selectedOptions);\n    setSelectedActors(selectedOptions as OptionType[]);\n  };\n\n  const onSubmit = () => {\n    const updatedMovie: MoviePostRequestDto = {\n      title: title,\n      release_date: Math.round(releaseDate.getTime() / 1000), // Time in seconds\n      actors: (selectedActors || []).map((actor: OptionType) => actor.value),\n    };\n    const url = props.isEditing ? `/api/movies/${movie?.id}` : '/api/movies';\n    fetch(url, {\n      method: props.isEditing ? 'PATCH' : 'POST',\n      body: JSON.stringify(updatedMovie)\n    }).then(() => {\n      props.onClose();\n    }).catch((e: Error) => {\n      setError('Failed to create movie.' + e.message);\n    });\n  };\n\n  return (\n    <Modal show={props.show} onHide={props.onClose}>\n      <FocusTrap active={props.show}>\n        <Modal.Header closeButton>\n          <Modal.Title>{props.isEditing ? 'Edit Movie' : 'Add Movie'}</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Form>\n            <Form.Group controlId=\"movieForm.title\">\n              <Form.Label>Movie Title</Form.Label>\n              <Form.Control\n                type=\"text\"\n                value={title}\n                placeholder=\"Enter Movie Title\"\n                onChange={(event) => setTitle(event.target.value)}\n              />\n            </Form.Group>\n            <Form.Group controlId=\"movieForm.release_date\">\n              <Form.Label>Movie Title</Form.Label>\n              <DatePicker\n                selected={releaseDate}\n                onChange={(selectedDate: Date) => setReleaseDate(selectedDate)}\n              />\n            </Form.Group>\n            <Form.Group controlId=\"movieForm.actors\">\n              <Form.Label>Actors</Form.Label>\n              <Select\n                isMulti\n                value={selectedActors as ValueType<OptionType>}\n                onChange={handleActorSelectionChange}\n                options={allActors}\n              />\n            </Form.Group>\n            <Form.Group controlId=\"movieForm.description\">\n              <Form.Label>Description</Form.Label>\n              <Form.Control as=\"textarea\" rows={3} />\n            </Form.Group>\n          </Form>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={props.onClose}>\n            Close\n          </Button>\n          <Button variant=\"primary\" onClick={onSubmit}>\n            Save Changes\n          </Button>\n        </Modal.Footer>\n      </FocusTrap>\n    </Modal>\n  );\n};\n\nexport default withRouter(MovieForm);\n","import axios from 'axios';\n\nconst instance = axios.create({\n  headers: {\n    'Authrization': 'xxxxxx'\n  }\n});\n\ninstance.interceptors.response.use(\n  response => response,\n  error => {\n    if (error.response.status === 401) {\n    }\n  });\n\nexport default instance;","import React, { useEffect, useState } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport CardDeck from 'react-bootstrap/CardDeck';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\n\nimport Movie from '../../components/Movie/Movie';\nimport { MovieDto } from '../../dto';\nimport MovieForm from '../../components/MovieForm/MovieForm';\nimport * as axiosMovies from '../../services/axios-movies';\n\nexport interface MoviesProps{\n}\n\nexport interface ModalData {\n  visible: boolean;\n  isEditing: boolean;\n  movie?: MovieDto;\n}\n\nconst Movies = (props: React.PropsWithChildren<MoviesProps> & RouteComponentProps<{id?: string|undefined}>) => {\n  const [movieItems, setMovieItems] = useState<MovieDto[]>([]);\n  const [modalData, setModalData] = useState<ModalData>({\n    visible: false,\n    isEditing: false\n  });\n\n  useEffect(() => {\n      axiosMovies.fetchMovies().then(data => {\n        setMovieItems(data.results);\n      })\n  }, [modalData.visible]);\n\n  const onMovieAddClicked = () => {\n    setModalData({\n      ...modalData,\n      visible: true,\n      isEditing: false\n    });\n  };\n\n  const onMovieEditClicked = (movie: MovieDto) => setModalData({\n    ...modalData,\n    visible: true,\n    isEditing: true,\n    movie: movie\n  });\n\n  const onMovieEditDeleted = (id: number) => {\n    console.log('Movie Id Deleted', id);\n  };\n\n  const handleModalClose = () => {\n    setModalData({\n      visible: false,\n      isEditing: false\n    });\n\n  };\n\n  const NUM_OF_CARD_PER_ROW = 3;\n  const cardDesks: Array<JSX.Element[]> = [[]];\n  movieItems.forEach((movieItem: MovieDto) => {\n    if (cardDesks[cardDesks.length - 1].length >= NUM_OF_CARD_PER_ROW) {\n      cardDesks.push([]);\n    }\n    cardDesks[cardDesks.length - 1].push(\n      <Movie\n        key={movieItem.id}\n        data={movieItem}\n        onEdit={() => onMovieEditClicked(movieItem)}\n        onDelete={() => onMovieEditDeleted(movieItem.id)}\n      >\n        {movieItem.title}\n      </Movie>\n    );\n  });\n\n  const noMoviesPlaceHolder = (\n    <Col> No Movies Found </Col>\n  );\n\n  const modal = modalData.visible ? (\n    <MovieForm show={modalData.visible} isEditing={modalData.isEditing} onClose={handleModalClose} data={modalData.movie}></MovieForm>\n  ) : null;\n\n  return (\n    <>\n      <Button variant=\"primary\" size=\"lg\" className='mb-3' onClick={onMovieAddClicked}>Add Movie</Button>\n      {\n        movieItems.length > 0 ?  cardDesks.map((cards, index) => {\n          return (\n            <CardDeck key={index} className=\"mt-3\">\n              {cards}\n            </CardDeck>\n          );\n        }) : noMoviesPlaceHolder\n      }\n      {modal}\n    </>\n  );\n};\n\nexport default withRouter(Movies);","import axios from './axios';\nimport { MovieListResultDto } from '../dto';\n\nconst MOVIES_BASE_URL = '/api/movies';\n\nexport function fetchMovies(): Promise<MovieListResultDto> {\n  return axios.get(MOVIES_BASE_URL)\n    .then(response => response.data);\n}\n","import './App.css';\n\nimport React from 'react';\nimport { Redirect, Route, Switch } from 'react-router-dom';\n\nimport Actors from './containers/Actors/Actors';\nimport Layout from './containers/Layout/Layout';\nimport Movies from './containers/Movies/Movies';\n\nfunction App() {\n  let routes = (\n    <Switch>\n      <Route path=\"/movies\" component={Movies}></Route>\n      <Route exact path=\"/actors\" component={Actors}></Route>\n      <Redirect to=\"/movies\"></Redirect>\n    </Switch>\n  );\n\n  return (\n    <Layout>\n      {routes}\n    </Layout>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter basename=\"/\">\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Movie\":\"Actor_Movie__3H2ZN\",\"Release_Date\":\"Actor_Release_Date__36fxu\",\"ActionButtons\":\"Actor_ActionButtons__3CY9E\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Movie\":\"Movie_Movie__32w0m\",\"Release_Date\":\"Movie_Release_Date__3_Fur\",\"ActionButtons\":\"Movie_ActionButtons__3ZhgO\"};"],"sourceRoot":""}